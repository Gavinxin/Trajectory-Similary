import math


def pretty_print_array(a):
    for i in range(len(a)):
        for j in range(len(a[i])):
            if (a[i][j] == (None, None)):
                print("(-,-)", end=" "),
            else:
                print(a[i][j], end=" "),
        print()

def local_distance(template_frame,test_frame):
    #计算距离
    assert type(template_frame) == type(test_frame)==int
    return math.sqrt(pow(template_frame-test_frame,2))

def dtw(template, test):
    global_distance =[]
    alignment=[]
    dummy_value = -1
    for i in range(len(template)):
        this_row = []
        for j in range(len(test)):
            this_row.append(dummy_value)
        global_distance.append(this_row)
    print(global_distance)
    pretty_print_array(global_distance)
    # 一次访问每个位置
    backpointer=[]
    empty_backpointer=(None,None)
    for i in range(len(template)):
        this_row = []
        for j in range(len(test)):
            this_row.append(empty_backpointer)
        backpointer.append(this_row)
    
    for i in range(len(template)):
        for j in range(len(test)):
            if (i == 0 and j == 0):
                # 起始点
                global_distance[i][j] = local_distance(template[i], test[j])
               # backpointer[i][j] = (None, None)
            elif(i == 0):
                assert global_distance[i][j - 1] >= 0
                global_distance[i][j]=global_distance[i][j-1]+local_distance(template[i], test[j])
                backpointer[i][j]=(i,j-1)
            elif (j == 0):
                assert global_distance[i-1][j ] >= 0
                global_distance[i][j]=global_distance[i-1][j]+local_distance(template[i],test[j])
                backpointer[i][j]=(i-1,j)
            else:
                assert global_distance[i - 1][j] >= 0
                assert global_distance[i][j-1] >= 0
                assert global_distance[i - 1][j-1] >= 0

                lowest_global_distance=global_distance[i-1][j]
                backpointer[i][j]=(i-1,j)
                if(global_distance[i][j-1]<lowest_global_distance):
                    lowest_global_distance=global_distance[i][j-1]
                    backpointer[i][j]=(i,j-1)
                if (global_distance[i-1][j - 1] < lowest_global_distance):
                    lowest_global_distance = global_distance[i-1][j - 1]
                    backpointer[i][j]=(i-1,j-1)
                global_distance[i][j] = global_distance[i - 1][j] + local_distance(template[i ], test[j])
                #backpointer[i][j] = 2
    D = global_distance[len(template)-1][len(test)-1]
    pretty_print_array(global_distance)
    pretty_print_array(backpointer)
    
    
    i,j=len(template)-1,len(test)-1
    alignment.append((i,j))
    
    while((i!=0) or (j!=0)):
        alignment.append(backpointer[i][j])
        i,j=backpointer[i][j]
        
    alignment.reverse()
    
    return D,alignment


def main():
    templates=[]
    templates.append( [3, 2, 1, 2, 3, 3, 3] )
    templates.append( [1, 1, 2, 3, 4, 3, 2] )
    test = [1, 2, 3, 2, 1]
    for t in templates:
        D, alignment = dtw(t, test)
        print(D)
        print(alignment)
    

if __name__=='__main__':
    main()
